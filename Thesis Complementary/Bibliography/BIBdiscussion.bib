% --------------------------------
% People
% --------------------------------
@online {ref:larsab,
title = {Bongo, Lars-Ailo},
year = {2022},
month = {Jun.},
urldate = {2022-06-01},
howpublished = {\url{https://uit.no/ansatte/person?p_document_id=66818}}
}

@online {ref:annesofie,
title = {Furberg, Anne-Sofie},
year = {2022},
month = {Jun.},
urldate = {2022-06-01},
howpublished = {\url{https://uit.no/ansatte/person?p_document_id=168042}}
}

@online {ref:latexintro,
title = {An introduction to LaTeX},
year = {2022},
month = {Jun.},
urldate = {2022-06-01},
howpublished = {\url{https://www.latex-project.org/about/}}
}

@online {ref:wysiwyg,
title = {Wikipedia: What you see is what you get},
year = {2022},
month = {Jun.},
urldate = {2022-06-01},
howpublished = {\url{https://en.wikipedia.org/wiki/WYSIWYG}}
}

@online {ref:spss,
title = {IBM SPSS Statistics},
year = {2022},
month = {Jun.},
urldate = {2022-06-01},
howpublished = {\url{https://www.ibm.com/products/spss-statistics}}
}

@online {ref:TSD,
title = {Services for sensitive data (TSD)},
year = {2022},
month = {Jun.},
urldate = {2022-06-01},
howpublished = {\url{https://www.uio.no/english/services/it/research/sensitive-data/}}
}

@online {ref:DataColors,
title = {How to classify data and information},
year = {2022},
month = {Jun.},
urldate = {2022-06-01},
howpublished = {\url{https://www.uio.no/english/services/it/security/lsis/data-classes.html}}
}

@online {ref:fitfutures,
title = {Fit Futures},
year = {2022},
month = {Jun.},
urldate = {2022-06-01},
howpublished = {\url{https://es.uit.no/research/fitfutures}}
}

@online {ref:agpl3,
title = {Affero GPL 3.0},
year = {2022},
month = {Jun.},
urldate = {2022-06-01},
howpublished = {\url{https://www.gnu.org/licenses/agpl-3.0.en.html}}
}

@online {ref:overleaf,
title = {Overleaf},
year = {2022},
month = {Jun.},
urldate = {2022-06-01},
howpublished = {\url{https://www.overleaf.com/}}
}

@online {ref:rproject,
title = {R-project},
year = {2022},
month = {Jun.},
urldate = {2022-06-01},
howpublished = {\url{https://www.r-project.org/}}
}

@online {ref:APLlanguage,
title = {APL (programming language)},
year = {2022},
month = {Jun.},
urldate = {2022-06-01},
howpublished = {\url{https://en.wikipedia.org/wiki/APL\_programming\_language}}
}

@online {ref:Slanguage,
title = {S (programming language)},
year = {2022},
month = {Jun.},
urldate = {2022-06-01},
howpublished = {\url{https://en.wikipedia.org/wiki/S\_programming\_language}}
}

@online {ref:Rassignoperators,
title = {Assignments with the = Operator},
year = {2022},
month = {Jun.},
urldate = {2022-06-01},
howpublished = {\url{https://developer.r-project.org/equalAssign.html}}
}

@online {ref:rcpp,
title = {Rcpp: Seamless R and C++ Integration},
year = {2022},
month = {Jun.},
urldate = {2022-06-01},
howpublished = {\url{https://www.rdocumentation.org/packages/Rcpp/versions/1.0.8.3}}
}

@online {ref:tiobeweb,
title = {TIOBE Index for June 2022},
year = {2022},
month = {Jun.},
urldate = {2022-06-01},
howpublished = {\url{https://www.tiobe.com/tiobe-index/}}
}

@online {ref:tiobewiki,
title = {TIOBE index},
year = {2022},
month = {Jun.},
urldate = {2022-06-01},
howpublished = {\url{https://en.wikipedia.org/wiki/TIOBE_index}}
}

@online {ref:dexascan,
title = {DEXA SCAN: Body Fat, Muscle, and Bone Testing},
year = {2022},
month = {Jun.},
urldate = {2022-06-01},
howpublished = {\url{https://dexascan.com/}}
}


@article{ref:KOHLER201888,
title = {SQL schema design: foundations, normal forms, and normalization},
journal = {Information Systems},
volume = {76},
pages = {88-113},
year = {2018},
issn = {0306-4379},
doi = {https://doi.org/10.1016/j.is.2018.04.001},
url = {https://www.sciencedirect.com/science/article/pii/S0306437917305069},
author = {Henning Köhler and Sebastian Link},
keywords = {Axioms, Armstrong database, Boyce–Codd normal form, Database schema design, Data redundancy, Functional dependency, Normalization, Reasoning, Update anomaly},
abstract = {Normalization helps us find a database schema at design time that can process the most frequent updates efficiently at run time. Unfortunately, relational normalization only works for idealized database instances in which duplicates and null markers are not present. On one hand, these features occur frequently in real-world data compliant with the industry standard SQL, and especially in modern application domains. On the other hand, the features impose challenges that make it difficult to extend the existing forty year old normalization framework to SQL, and any current extensions are fairly limited. We introduce a new class of functional dependencies and show that they provide the right notion for SQL schema design. Axiomatic and linear-time algorithmic characterizations of the associated implication problem are established. These foundations enable us to propose a Boyce–Codd normal form for SQL. We justify the normal form by showing that it permits precisely those SQL instances which are free from data redundancy. Unlike the relational case, there are SQL schemata that cannot be converted into Boyce–Codd normal form. Nevertheless, for an expressive sub-class of our functional dependencies we establish a normalization algorithm that always produces a schema in Value-Redundancy free normal form. This normal form permits precisely those instances which are free from any redundant data value occurrences other than the null marker. Experiments show that our functional dependencies occur frequently in real-world data and that they are effective in eliminating redundant values from these data sets without loss of information.}
}